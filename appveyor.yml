version: 2.1.0.{build}
image: Visual Studio 2017

configuration:
  - Release
environment:
  PROJECT: toofz.NecroDancer.Leaderboards.ReplaysService
  PROJECT_PACKAGE: toofz-replays-service-v%APPVEYOR_BUILD_VERSION%.msi
  COVERALLS_REPO_TOKEN:
    secure: L38QT8owBrci3+aHCjNUkOdToxGlK2aL+ApnPlvwyQyYHFFvBE3CqAiRrmc9j3mP
  COVERALLS_SERVICE_NAME: appveyor
  COVERALLS_SERVICE_JOB_ID: '%APPVEYOR_JOB_ID%'
artifacts:
  - path: Installer\bin\$(configuration)\$(PROJECT_PACKAGE)
    name: ReplaysService
cache:
  - packages -> **\packages.config
notifications:
  - provider: Slack
    incoming_webhook:
      secure: c7l1UmXHWpIDLL1awU4r0QYVPToYM/XjV8trFyD1oHArKxs/vBTYiKYScr1EhCUgmEX6sAFBTvkUHF/k5B+cGjzqRBR2XkAO+lzk8cHQ1FI=

install:
  - ps: |
      Write-Host "Installing Azure Storage Emulator..." -ForegroundColor Cyan
      Write-Host "Downloading..."
      $msiPath = "$($env:USERPROFILE)\MicrosoftAzureStorageEmulator.msi"
      (New-Object Net.WebClient).DownloadFile('https://download.microsoft.com/download/F/3/8/F3857A38-D344-43B4-8E5B-2D03489909B9/MicrosoftAzureStorageEmulator.msi', $msiPath)
      Write-Host "Installing..."
      cmd /c start /wait msiexec /i "$msiPath" /q
      del $msiPath
      Write-Host "Installed Azure Storage Emulator" -ForegroundColor Green

before_build:
  - appveyor-retry nuget restore -DisableParallelProcessing
build:
  project: $(PROJECT).sln
  verbosity: minimal

test_script:
  - ps: |
      $project = $env:PROJECT
      $configuration = $env:CONFIGURATION

      [xml]$xml = Get-Content "$project.Tests\packages.config"
      $version = ($xml.packages.package | ? { $_.id -eq 'OpenCover' }).version

      & "packages\OpenCover.$version\tools\OpenCover.Console.exe" `
        -register:user `
        -target:'vstest.console.exe' `
        -targetargs:".\$project.Tests\bin\$configuration\$project.Tests.dll" `
        -filter:'+[ReplaysService*]*'
      if ($LASTEXITCODE -ne 0) { throw "Execution failed with exit code $LASTEXITCODE" }
after_test:
  - ps: |
      if (Test-Path Env:\APPVEYOR_PULL_REQUEST_NUMBER) {
        $msg = 'The environment variable "COVERALLS_REPO_TOKEN" is a secure environment variable. ' + `
               'Secure environment variables are not available during pull request builds. ' + `
               'Code coverage results were not uploaded.'
        Write-Output $msg
      } elseif (!(Test-Path Env:\COVERALLS_REPO_TOKEN)) {
        $msg = 'The environment variable "COVERALLS_REPO_TOKEN" is not set. ' + `
               'Code coverage results were not uploaded.'
        Write-Warning $msg
      } else {
        [xml]$xml = Get-Content "$env:PROJECT.Tests\packages.config"
        $version = ($xml.packages.package | ? { $_.id -eq 'coveralls.io' }).version

        & "packages\coveralls.io.$version\tools\coveralls.net.exe" `
          --opencover results.xml `
          -r $env:COVERALLS_REPO_TOKEN
        # coveralls.net does not return a non-zero exist code on error.
        if ($LASTEXITCODE -ne 0) { throw "Execution failed with exit code $LASTEXITCODE" }

        Write-Output 'Code coverage results have been uploaded.'
      }

deploy:
  - provider: Environment
    name: production
    on:
      appveyor_repo_tag: true
